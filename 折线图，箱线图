####批量绘制折线图和箱线图在同一张画布上

####CEBPD expression
library(ggplot2)
library(ggthemes)
library(ggpubr)
##H18 people
raw_dat <- read.table("~/Desktop/usb/dat/high_altitude/HA2018/HA2018.sleuth.norm_tpm.txt", header = T, row.names = 1)
genes <- data.frame(genes=rownames(raw_dat))
dat <- log2(raw_dat + 1)

target <- c("CEBPD","HIF1A","ARNT","EPAS1","ARNT2","HIF3A","ARNTL")
dat_sub <- dat[target,]

dat_sub_baseline <- dat_sub[,grep("^A",colnames(dat_sub))]
dat_sub_baseline <- cbind(period=c(rep("Baseline",ncol(dat_sub_baseline))), as.data.frame(t(dat_sub_baseline)))

dat_sub_acute <- dat_sub[,grep("^B",colnames(dat_sub))]
dat_sub_acute <- cbind(period=c(rep("Acute",ncol(dat_sub_acute))), as.data.frame(t(dat_sub_acute)))

dat_sub_chronic <- dat_sub[,grep("^C", colnames(dat_sub))]
dat_sub_chronic <- cbind(period=c(rep("Chronic",ncol(dat_sub_chronic))), as.data.frame(t(dat_sub_chronic)))

draw_dat <- rbind(dat_sub_baseline, dat_sub_acute, dat_sub_chronic)
draw_dat$period <- factor(draw_dat$period, levels = c("Baseline","Acute","Chronic"))

for (i in target){
  result_name=paste0("./plot/","HA2018-",i,".pdf")
  pdf(result_name, width = 9, height = 10)
  expression=draw_dat[,i]
  p <- ggplot(draw_dat, aes(period,expression,fill=period))+
    theme_few()+
    stat_boxplot(geom = "errorbar", width=0.15)+
    geom_boxplot(size=0.5,outlier.shape = NA)+
    geom_jitter(aes(fill=period), shape=21, size=2.5)+
    scale_fill_manual(values = c("#E64B35FF","#00A087FF","#4DBBD5FF"))+
    labs(x="Period", y=expression(bold(~Log[2]~"(TMP expression)")))+
    stat_compare_means(comparisons = list(c("Baseline","Acute"),
                                          c("Baseline","Chronic"),
                                          c("Acute","Chronic")),
                       method = "wilcox.test",
                       label = "p.signif",
                       size=8)+
    theme(plot.title = element_text(hjust = 0.5,size = 18, face = "bold"),
          axis.title=element_text(size = 18, face = "bold"),
          axis.text = element_text(size = 16, face = "bold"),
          plot.margin = margin(1, 1, 1, 1, unit = "cm"),
          legend.text = element_text(size = 16, face = "bold"),
          legend.title = element_text(size = 18, face = "bold"))+
    ggtitle(paste0("HA2018-",i))
  print(p)
  dev.off()
}
###折线图
##折线图
options(digits = 4)
dat_test <- as.data.frame(t(draw_dat[,2:8]))
colnames(dat_test)

library(tidyverse)
dat_new <- dat_test %>% 
  rownames_to_column("Gene") %>% 
  pivot_longer(-1, names_to = "Sample", values_to = "Value")

dat_new$group <- str_split(dat_new$Sample,"HA",simplify = T)[,1]
dat_new$group <- factor(dat_new$group, levels = c("A18","B18","C18"), labels = c("Baseline","Acute","Chronic"))


pdf("./plot/HA2018_line_plot.pdf", width = 10, height = 8)
p <- ggplot(data = dat_new, aes(x=group, y=Value,group=Gene))+
  stat_summary(aes(group=1), fun.y = mean, geom="line",size=1.2, color="#c51b7d")+
  # #stat_summary(fun = "mean", geom = "pointrange",
  #              fun.max = function(x)mean(x)+sd(x)/sqrt(length(x)),
  #              fun.min = function(x)mean(x)-sd(x)/sqrt(length(x)))+
  #stat_summary(geom="errorbar", width=1, fun.min = min, fun.max = max)+
  stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", width=.4)+
  stat_summary(fun = "mean", geom = "point")+
  guides(fill=TRUE)+
  labs(x="Period", y=expression(bold(~Log[2]~"(TMP expression)")))+
  facet_wrap("Gene", scales = "free", nrow = 2)+
  theme(axis.title=element_text(face = 'bold',size=15),
        axis.text = element_text(size = 10, colour = 'black', face = "bold"),
        axis.ticks.length=unit(.2, "cm"),
        axis.ticks = element_line(colour = "black"),
        title = element_text(size = 8, face = "italic"),
        panel.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black",size = 1.5, fill=NA),
        plot.margin = margin(1, 1, 1, 1, "cm"),
        strip.text.x.top = element_text(size = 8, face = "bold.italic"))
print(p)
dev.off()
